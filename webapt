#!/usr/bin/python3

"""webapt is a commandline web application package manager and provides 
commands for installing, removing, and searching web applications."""

import argparse
import gzip
import os
import requests
import sys
import zlib

C_LIST   = 'list'
C_SEARCH = 'search'
C_SHOW   = 'show'
C_INSTALL= 'install'
C_REMOVE = 'remove'
C_UPDATE = 'update'
COMMANDS = [C_LIST, C_SEARCH, C_SHOW, C_INSTALL, C_REMOVE, C_UPDATE]

SOURCE = 'https://github.com/djoerd/webapt/blob/master/web/os/ubuntu/xenial/Packages.gz?raw=true'


def fatal_error(message):
    print('Error: ' + message, file=sys.stderr)
    sys.exit(1)

def read_packages():
    packages = []
    package = {}
    try:
        response = requests.get(SOURCE)
    except:
        fatal_error('Packages not found. Please, check internet connection.')
    if response.status_code == 404:
        fatal_error('Packages not found.')
    try:
        data = zlib.decompress(response.content, zlib.MAX_WBITS|32)
    except:
        fatal_error('Packages malformed. Please check source url.')
    for line in data.decode("utf-8").split("\n"):
        if line == "":
            if 'Package' in package:
                packages.append(package)
            package = {} 
        else:
            (key, value) = line.split(": ", 1)
            package[key] = value
    return packages
 
def root_data_dir():
    result = ''
    preferred = '/usr/share'
    if ('XDG_DATA_DIRS' in os.environ):
        for dir in os.environ['XDG_DATA_DIRS'].split(':'):
            if (dir == preferred):
                result = dir
            elif (result == ''):
                result = dir
    if (result == ''):
        return preferred
    else:
        return result

def user_data_dir(home):
    if ('XDG_DATA_HOME' in os.environ):
        return os.environ['XDG_DATA_HOME']
    else:
        return home + '/.local/share'

def user_config_dir(home):
    if ('XDG_CONFIG_HOME' in os.environ):
        return os.environ['XDG_CONFIG_HOME']
    else:
        return home + '/.config'

def root_config():
    return '.config'
  
def install_dirs(root=False):
    """Directories following the XDG Base Directory Specification at:
    https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"""
    home = os.environ['HOME'] # must be there
    if (root):
        data = root_data_dir()
    else:
        data = user_data_dir(home)
    config = user_config_dir(home)
    return (data, config)


def check_depends(package):
    return True #TODO: check if chromium-browser (and such) exists

def get_template(package):
    if not 'Template' in package:
        fatal_error('No template in package')
    source = 'https://github.com/djoerd/webapt/blob/master/web/' #TODO!
    template = package['Template']
    url = source + template + '?raw=true'
    try:
        response = requests.get(url)
    except:
        fatal_error('Template not found. Check your connection.')
    if response.status_code == 404:
        fatal_error('Template not found. Package malformed.')
    return response.content.decode("utf-8")

def write_file(name, dir, contents):
    print ('Name: ', name)
    print ('Dir:  ', dir)
    print (contents)
    raise Exception('my error')
 

def install_package(package):
    template = get_template(package)
    for key in package:
        template = template.replace('$' + key, package[key])
    (dir_data, dir_config) = install_dirs(root=True)
    desktop_file = template.replace('$APTConfigDir', dir_config)
    try:
        dir_applications = dir_data + '/applications'
        write_file(package['Package'], dir_applications, desktop_file)
        return
    except:
        pass
    (dir_data, dir_config) = install_dirs(root=False)
    desktop_file = template.replace('$APTConfigDir', dir_config)
    try:
        dir_applications = dir_data + '/applications'
        write_file(package['Package'], dir_applications, desktop_file)
    except:
        fatal_error('Cannot install package: ')

def apt_install(app_name):
    if (app_name is None):
        fatal_error('package name required')
    print ("Installing " + app_name + "...", file=sys.stderr)
    for package in read_packages():
        if app_name == package['Package']: # check: 'Package' in package done in read_packages()
            found = True
            break
    if not found:
        fatal_error('Package not found: ' + app_name)
    check_depends(package)
    install_package(package) 


def remove_file_if_exists(file_name):
    try:
        os.remove(file_name)
    except:
        pass

def remove_freedesktop_package(app_name, root):
    (dir_data, dir_config) = install_dirs(root)
    desktop_file = dir_data + '/applications/' + app_name + '.desktop'
    os.remove(desktop_file)
    if (root): 
        type = 'global'
    else:
        type = 'local'
    print ("Removed " + type + " package: " + app_name)
    icon_prefix = dir_data + '/icons/' + app_name 
    remove_file_if_exists(icon_prefix + ".png")
    remove_file_if_exists(icon_prefix + ".svg")



def apt_remove(app_name, found=False):
    if (app_name is None):
        fatal_error('package name required')
    for package in read_packages():
        if 'Package' in package and app_name == package['Package']:
            found = True
            break
    if not found:
        fatal_error('Package not in list: ' + app_name + ' (use "-f" to force removal)')
    error = ""
    try:  # first try as root
        remove_freedesktop_package(app_name, root=True)
        return  # success? then we're done
    except PermissionError:
        error = "Permission denied: " + app_name
    except:  # FileNotFoundError:
        pass
    try: # second try as normal user
        remove_freedesktop_package(app_name, root=False)
    except FileNotFoundError:
        if (error != ""):
            print (error, file=sys.stderr)
        else:
            print ("Package already removed: " + app_name, file=sys.stderr)


def apt_list(app_name=None):
    for package in read_packages():
        p_name = package['Package']
        version =  package['Version']
        if (app_name is None or app_name == p_name):
            print (p_name, version)

def apt_show(app_name):
    if app_name is None:
        fatal_error('Please provide a package name')
    for package in read_packages():
        p_name = package['Package']
        if (app_name is None or app_name == p_name):
            for key in package:
                print(key + ': ' + package[key])

def apt_search(search_string):
    if search_string is None:
        fatal_error('Please provide a search string')
    keywords = search_string.lower().split(' ')
    for package in read_packages():
        p_name = package['Package']
        version = package['Version']
        result = p_name
        snippet = ''
        if 'Section' in package:
            snippet = package['Section']
            result += ' ' + snippet
        if 'Name' in package:
            snippet = package['Name']
            result += ' ' + snippet
        if 'Description' in package:
            snippet = package['Description']
            result += ' ' + snippet
        result = result.lower()
        found = True
        for word in keywords:
            if not word in result:
               found = False
               break
        if found:
            print (p_name, version)
            print ('  ' + snippet)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__, allow_abbrev=True)
    parser.add_argument('command', help=str(COMMANDS))
    parser.add_argument('arg', help="command argument", nargs='?')
    parser.add_argument("-f", "--force", help="force removal", action='store_true')


    args = parser.parse_args()
    if (not args.command in COMMANDS):
        fatal_error('Command one of ' + str(COMMANDS))
    elif (args.command == C_LIST):
        apt_list(args.arg)
    elif (args.command == C_SEARCH):
        apt_search(args.arg)
    elif (args.command == C_SHOW):
        apt_show(args.arg)
    elif (args.command == C_INSTALL):
        apt_install(args.arg)
    elif (args.command == C_REMOVE):
        apt_remove(args.arg, args.force)
    elif (args.command == C_UPDATE):
        fatal_error('Not implemented')
 
